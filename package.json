{
  "name": "task-manager",
  "version": "1.1.0",
  "description": "My first godspeed project.",
  "main": "dist/index.js",
  "scripts": {
    "gen-crud-api": "npx @godspeedsystems/api-generator",
    "dev": "run-script-os",
    "dev:win32": "nodemon --watch src -e ts,js,yaml,json -r dotenv src\\index.ts",
    "dev:darwin:linux": "nodemon --watch src -e ts,js,yaml,json -r dotenv ./src/index.ts",
    "dev:default": "nodemon --watch src -e ts,js,yaml,json -r dotenv ./src/index.ts",
    "build": "run-script-os",
    "build:win32": "npm run clean && tsc --noEmit && mkdir dist && npx swc src -d dist --strip-leading-paths && copyfiles -a -u 1 \"src/**/*.!(ts)\" dist && copyfiles -a \"config/**/*\" dist && copyfiles -a -u 2 \"src/mappings/**/*\" \"dist/mappings\" && if exist README.md copy README.md dist\\ && copy tsconfig.json dist\\",
    "build:darwin:linux": "npm run clean && tsc --noEmit && mkdir -p dist && npx swc src -d dist --strip-leading-paths && rsync -a --exclude '*.ts' ./src/ ./dist/ && rsync -a ./config/ ./dist/config/ && rsync -a --remove-source-files ./src/mappings/ ./dist/mappings/ && [ -f README.md ] && cp README.md ./dist/ || true && cp tsconfig.json ./dist/",
    "build:default": "npm run clean && tsc --noEmit && rsync -a --exclude '*.ts' ./src/ ./dist/ && rsync -a ./config/ ./dist/config && rsync -a ./src/mappings/ ./dist/mappings",
    "preview": "run-script-os",
    "preview:win32": "node dist\\index.js",
    "preview:darwin:linux": "node dist/index.js",
    "preview:default": "node dist/index.js",
    "clean": "run-script-os",
    "clean:win32": "if exist dist rmdir /s /q dist",
    "clean:darwin:linux": "rm -rf dist",
    "clean:default": "rm -rf dist",
    "prisma-db-push": "for i in src/datasources/*.prisma; do npx --yes prisma db push --schema $i; done;",
    "prisma-generate": "for i in src/datasources/*.prisma; do npx --yes prisma generate --schema $i; done;",
    "serve": "npm run clean && nodemon --watch src --watch config --watch mappings -e ts,js,yaml,json,.env --exec \"npm run build && npm run preview\"",
    "build:test": "run-script-os",
    "build:test:win32": "npm run clean && tsc --noEmit && mkdir dist && npx swc src -d dist --strip-leading-paths && npx swc test/index.ts -o dist/index.js && copyfiles -a -u 1 \"src/**/*.!(ts)\" dist && copyfiles -a \"config/**/*\" dist && copyfiles -a -u 2 \"src/mappings/**/*\" \"dist/mappings\" && if exist README.md copy README.md dist\\ && copy tsconfig.json dist\\",
    "build:test:darwin:linux": "npm run clean && tsc --noEmit && mkdir -p dist && npx swc src -d dist --strip-leading-paths && npx swc test/index.ts -o dist/index.js && rsync -a --exclude '*.ts' ./src/ ./dist/ && rsync -a ./config/ ./dist/config/ && rsync -a --remove-source-files ./src/mappings/ ./dist/mappings/ && [ -f README.md ] && cp README.md ./dist/ || true && cp tsconfig.json ./dist/",
    "build:test:default": "npm run clean && tsc --noEmit && rsync -a --exclude '*.ts' ./src/ ./dist/ && rsync -a ./config/ ./dist/config && rsync -a ./src/mappings/ ./dist/mappings && npx swc test/index.ts -o dist/index.js",
    "preview:test": "run-script-os",
    "preview:test:win32": "node dist\\index.js",
    "preview:test:darwin:linux": "node dist/index.js",
    "preview:test:default": "node dist/index.js",
    "test": "run-script-os",
    "test:win32": "dotenv -e .test.env -- cmd /c \"npm run build:test && (rmdir /s /q test\\dist 2>nul || echo test\\dist not found) && tsc -p tsconfig.test.json && mocha --file ./test/dist/setup.js test/dist/**/*.test.js\"",
    "test:darwin:linux": "dotenv -e .test.env -- sh -c 'npm run build:test && rm -rf test/dist && tsc -p tsconfig.test.json && mocha --file ./test/dist/setup.js test/dist/**/*.test.js'",
    "test:default": "dotenv -e .test.env -- sh -c 'npm run build:test && rm -rf test/dist && tsc -p tsconfig.test.json && mocha --file ./test/dist/setup.js test/dist/**/*.test.js'",
    "test:single": "run-script-os",
    "test:single:win32": "dotenv -e .test.env -- cmd /c \"npm run build:test && set NODE_OPTIONS=--import=ts-node/register && mocha --file ./test/setup.ts --project tsconfig.test.json %*\"",
    "test:single:darwin:linux": "dotenv -e .test.env -- sh -c 'npm run build:test && NODE_OPTIONS=\"--import=ts-node/register\" mocha --file ./test/setup.ts --project tsconfig.test.json \"$@\"' --",
    "test:single:default": "dotenv -e .test.env -- sh -c 'npm run build:test && NODE_OPTIONS=\"--import=ts-node/register\" mocha --file ./test/setup.ts --project tsconfig.test.json \"$@\"' --",
    "prisma-prepare:test": "run-script-os",
    "prisma-preparecls:test:win32": "dotenv -e .test.env -- godspeed prisma prepare",
    "prisma-prepare:test:darwin:linux": "dotenv -e .test.env -- godspeed prisma prepare",
    "prisma-prepare:test:default": "dotenv -e .test.env -- godspeed prisma prepare",
    "test:coverage": "run-script-os",
    "test:coverage:win32": "dotenv -e .test.env -- cmd /c \"npm run build:test && (rmdir /s /q test\\dist 2>nul || echo test\\dist not found) && tsc -p tsconfig.test.json && nyc mocha --file ./test/dist/setup.js test/dist/**/*.test.js\"",
    "test:coverage:darwin:linux": "dotenv -e .test.env -- sh -c 'npm run build:test && rm -rf test/dist && tsc -p tsconfig.test.json && nyc mocha --file ./test/dist/setup.js test/dist/**/*.test.js'",
    "test:coverage:default": "dotenv -e .test.env -- sh -c 'npm run build:test && rm -rf test/dist && tsc -p tsconfig.test.json && nyc mocha --file ./test/dist/setup.js test/dist/**/*.test.js'"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@swc/cli": "^0.7.7",
    "@swc/core": "^1.11.24",
    "@types/config": "^3.3.5",
    "@types/node": "^22.15.19",
    "copyfiles": "^2.4.1",
    "nodemon": "^3.1.10",
    "nyc": "^17.1.0",
    "run-script-os": "^1.1.6",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.3"
  },
  "dependencies": {
    "@godspeedsystems/core": "^2.5.4",
    "@godspeedsystems/plugins-axios-as-datasource": "^1.0.6",
    "@godspeedsystems/plugins-express-as-http": "^1.0.25",
    "@godspeedsystems/plugins-prisma-as-datastore": "^3.0.0",
    "@prisma/client": "^6.8.2",
    "@types/chai": "^5.2.2",
    "@types/mocha": "^10.0.10",
    "chai": "^5.2.0",
    "config": "^4.0.0",
    "dotenv": "^16.5.0",
    "dotenv-cli": "^8.0.0",
    "mocha": "^11.7.1",
    "pino-pretty": "^13.0.0",
    "prisma": "^6.8.2"
  },
  "packageManager": "pnpm@10.12.1+sha512.f0dda8580f0ee9481c5c79a1d927b9164f2c478e90992ad268bbb2465a736984391d6333d2c327913578b2804af33474ca554ba29c04a8b13060a717675ae3ac"
}